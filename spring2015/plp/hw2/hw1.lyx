#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble

%
\usepackage{color}
\usepackage{amsfonts}
\usepackage{cancel}
\usepackage{mathabx}
\usepackage{nopageno}%%%  The following few lines affect the margin sizes. 
\usepackage{bm}
\addtolength{\topmargin}{-.5in}
\setlength{\textwidth}{6in}       
\setlength{\oddsidemargin}{.25in}              
\setlength{\evensidemargin}{.25in}         
  
\setlength{\textheight}{9in}
\renewcommand{\baselinestretch}{1}
\reversemarginpar   
%
%
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
COP 5555 Homework 2 
\end_layout

\begin_layout Author
Maksim Levental
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
This grammar is not LL(1) because 
\begin_inset Formula 
\begin{align*}
\text{FIRST}\left(\left\langle Factor\right\rangle ::={\color{red}IDENT}\right)\bigcap\text{FIRST}\left(\left\langle Factor\right\rangle ::={\color{red}IDENT\,[\,}\left\langle Expression\right\rangle \,{\color{red}]}\right)\bigcap\\
\text{FIRST}\left(\left\langle Factor\right\rangle ::=\left\langle ClosureEvalExpression\right\rangle \right) & ={\color{red}IDENT}\neq\emptyset\\
\text{FIRST}\left(\left\langle Factor\right\rangle ::=\left\langle List\right\rangle \right)\bigcap\text{FIRST}\left(\left\langle Factor\right\rangle ::=\left\langle Maplist\right\rangle \right) & ={\color{red}@}\neq\emptyset
\end{align*}

\end_inset

and similarly for 
\begin_inset Formula $\left\langle Thing\right\rangle ,\left\langle Elem\right\rangle ,\left\langle Term\right\rangle ,\left\langle Expression\right\rangle ,\left\langle RangeExpr\right\rangle ,\left\langle KeyValueExpression\right\rangle ,\left\langle KeyValueList\right\rangle ,\left\langle ExpressionList\right\rangle $
\end_inset

 .
 Also 
\begin_inset Formula 
\begin{align*}
\text{FIRST}\left(\left\langle Statement\right\rangle ::={\color{red}if\,(}\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle \right)\bigcap\\
\text{FIRST}\left(\left\langle Statement\right\rangle ::={\color{red}if\,(}\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle {\color{red}else\,}\left\langle Block\right\rangle \right) & ={\color{red}if}\neq\emptyset\\
\text{FIRST}\left(\left\langle Statement\right\rangle ::={\color{red}while*(}\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle \right)\bigcap\\
\text{FIRST}\left(\left\langle Statement\right\rangle ::={\color{red}while*(}\left\langle RangeExpression\right\rangle {\color{red})}\left\langle Block\right\rangle \right) & ={\color{red}while*}\neq\emptyset
\end{align*}

\end_inset

and
\begin_inset Formula 
\begin{align*}
\text{FIRST}\left(\left\langle Type\right\rangle ::=\left\langle KeyValueType\right\rangle \right)\bigcap\\
\text{FIRST}\left(\left\langle Type\right\rangle ::=\left\langle ListType\right\rangle \right) & ={\color{red}@}\neq\emptyset
\end{align*}

\end_inset

and
\begin_inset Formula 
\begin{align*}
\text{FIRST}\left(\left\langle Declaration\right\rangle ::={\color{red}def}\left\langle VarDec\right\rangle \right)\bigcap\\
\text{FIRST}\left(\left\langle Declaration\right\rangle ::={\color{red}def}\left\langle ClosureDec\right\rangle \right) & ={\color{red}def}\neq\emptyset
\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[Predict Sets]
\end_layout

\end_inset

Since EPS(Factor)=false 
\begin_inset Formula 
\begin{align*}
\text{PREDICT}\left(\left\langle Factor\right\rangle \right) & =\text{FIRST}\left(\left\langle Factor\right\rangle \right)\\
 & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} 
\end{align*}

\end_inset

Since EPS(Statement)=true
\begin_inset Formula 
\begin{align*}
\text{PREDICT}\left(\left\langle Statement\right\rangle \right) & =\text{FIRST}\left(\left\langle Statement\right\rangle \right)\bigcup\text{FOLLOW}\left(\left\langle Statement\right\rangle \right)\\
 & =\left\{ IDENT,print,while,while*,if,\%,return\right\} \bigcup\left\{ ;\right\} 
\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[First "Sets"]
\end_layout

\end_inset

 These sets contain repetitions to indicate where LL(1)-ness is violated.
\begin_inset Formula 
\begin{align*}
\left\langle VeryStrongOp\right\rangle  & =\left\{ \ll,\gg\right\} \\
\left\langle StrongOp\right\rangle  & =\left\{ *,/\right\} \\
\left\langle WeakOp\right\rangle  & =\left\{ +,-\right\} \\
\left\langle RelOp\right\rangle  & =\left\{ |,\&,==,!=,<,>,\leq,\geq\right\} \\
\left\langle Factor\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,{\color{green}IDENT},\{,@,{\color{green}@}\right\} \\
\left\langle Thing\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,{\color{green}IDENT},\{,@,{\color{green}@}\right\} \\
\left\langle Elem\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,{\color{green}IDENT},\{,@,{\color{green}@}\right\} \\
\left\langle Term\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,{\color{green}IDENT},\{,@,{\color{green}@}\right\} \\
\left\langle Expression\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,{\color{green}IDENT},\{,@,{\color{green}@}\right\} \\
\left\langle RangeExpr\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,{\color{green}IDENT},\{,@,{\color{green}@}\right\} \\
\left\langle MapList\right\rangle  & =\left\{ @\right\} \\
\left\langle KeyValueExpression\right\rangle  & =\left\{ IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,IDENT,\{,@,{\color{green}@}\right\} \\
\left\langle KeyValueList\right\rangle  & =\left\{ \epsilon,IDENT,{\color{green}IDENT},INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,IDENT,\{,@,{\color{green}@}\right\} \\
\left\langle ExpressionList\right\rangle  & =\left\{ \epsilon,IDENT,{\color{green}IDENT,}INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,IDENT,\{,@,{\color{green}@}\right\} \\
\left\langle List\right\rangle  & =\left\{ @\right\} \\
\left\langle LValue\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle ClosureEvalExpression\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle Statement\right\rangle  & =\left\{ \epsilon,IDENT,print,while,while*,{\color{green}while*},if,{\color{green}if},\%,return\right\} \\
\left\langle VarDec\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle FormalArgList\right\rangle  & =\left\{ \epsilon,IDENT\right\} \\
\left\langle Closure\right\rangle  & =\left\{ \{\right\} \\
\left\langle ClosureDec\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle ListType\right\rangle  & =\left\{ @\right\} \\
\left\langle KeyValueType\right\rangle  & =\left\{ @\right\} \\
\left\langle SimpleType\right\rangle  & =\left\{ int,boolean,string\right\} \\
\left\langle Type\right\rangle  & =\left\{ int,boolean,string,@,{\color{green}@}\right\} \\
\left\langle Declaration\right\rangle  & =\left\{ def\right\} \\
\left\langle Block\right\rangle  & =\left\{ \{\right\} \\
\left\langle ImportList\right\rangle  & =\left\{ \epsilon,import\right\} \\
\left\langle Program\right\rangle  & =\left\{ import,class\right\} 
\end{align*}

\end_inset

Refactoring
\begin_inset Formula 
\begin{align*}
\left\langle VeryStrongOp\right\rangle  & =\left\{ \ll,\gg\right\} \\
\left\langle StrongOp\right\rangle  & =\left\{ *,/\right\} \\
\left\langle WeakOp\right\rangle  & =\left\{ +,-\right\} \\
\left\langle RelOp\right\rangle  & =\left\{ |,\&,==,!=,<,>,\leq,\geq\right\} \\
\left\langle IdentInFactor\right\rangle  & ::={\color{red}IDENT}\,\left(\epsilon|{\color{red}[}\left\langle Expression\right\rangle {\color{red}]}|{\color{red}(}\left\langle ExpressionList\right\rangle {\color{red})}\right)\\
 & =\left\{ IDENT\right\} \\
\left\langle List\right\rangle  & ::={\color{red}@}\,\left({\color{red}@[}\left\langle KeyValueList\right\rangle {\color{red}]}|{\color{red}[}\left\langle Expression\right\rangle {\color{red}]}\right)\\
\left\langle Factor\right\rangle  & ::=\left\langle IdentInFactor\right\rangle |{\color{red}INT\_LIT}|{\color{red}true}|{\color{red}false}|{\color{red}STRING\_LIT}|{\color{red}!}\left\langle Factor\right\rangle |{\color{red}-}\left\langle Factor\right\rangle |{\color{red}size}{\color{red}(}\left\langle Expression\right\rangle {\color{red})}\\
 & |{\color{red}key(}\left\langle Expression\right\rangle {\color{red})}|{\color{red}value(}\left\langle Expression\right\rangle {\color{red})}|\left\langle Closure\right\rangle |\\
 & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Thing\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Elem\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Term\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Expression\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle RangeExpr\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle KeyValueExpression\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle KeyValueList\right\rangle  & =\left\{ \epsilon,IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle ExpressionList\right\rangle  & =\left\{ \epsilon,IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle LValue\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle WhileStar\right\rangle  & ::={\color{red}*{\color{red}(}}\left(\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle |\left\langle RangeExpression\right\rangle {\color{red})}\left\langle Block\right\rangle \right)\\
 & =\left\{ *\right\} \\
\left\langle While\right\rangle  & ::={\color{red}while}{\color{red}(}\left(\left\langle WhileStar\right\rangle |\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle \right)\\
 & =\left\{ while\right\} \\
\left\langle If\right\rangle  & ::={\color{red}if}{\color{red}(}\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle \left(\epsilon|{\color{red}else}\left\langle Block\right\rangle \right)\\
\left\langle Statement\right\rangle  & =\left\{ \epsilon,IDENT,print,while,if,\%,return\right\} \\
\left\langle VarDec\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle FormalArgList\right\rangle  & =\left\{ \epsilon,IDENT\right\} \\
\left\langle Closure\right\rangle  & =\left\{ \{\right\} \\
\left\langle ClosureDec\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle ValueType\right\rangle  & ::={\color{red}@}\left({\color{red}[}\left\langle Type\right\rangle {\color{red}]}|{\color{red}@}{\color{red}[}\left\langle SimpleType\right\rangle :\left\langle Type\right\rangle {\color{red}]}\right)\\
 & =\left\{ @\right\} \\
\left\langle SimpleType\right\rangle  & =\left\{ int,boolean,string\right\} \\
\left\langle Type\right\rangle  & =\left\{ int,boolean,string,@\right\} \\
\left\langle Declaration\right\rangle  & =\left\{ def\right\} \\
\left\langle Block\right\rangle  & =\left\{ \{\right\} \\
\left\langle ImportList\right\rangle  & =\left\{ \epsilon,import\right\} \\
\left\langle Program\right\rangle  & =\left\{ import,class\right\} 
\end{align*}

\end_inset

The only non-terminal for which EPS is true is 
\begin_inset Formula $\left\langle Program\right\rangle $
\end_inset

, i.e.
 
\begin_inset Formula $\left\langle Program\right\rangle ::=\left\langle ImportList\right\rangle $
\end_inset

 and 
\begin_inset Formula $\left\langle ImportList\right\rangle ::=\epsilon$
\end_inset

.
 Therefore we compute FOLLOW
\begin_inset Formula $\left(\left\langle ImportList\right\rangle \right)$
\end_inset

 which is 
\begin_inset Formula $class$
\end_inset

.
 Therefore the Predict sets are
\begin_inset Formula 
\begin{align*}
\left\langle VeryStrongOp\right\rangle  & =\left\{ \ll,\gg\right\} \\
\left\langle StrongOp\right\rangle  & =\left\{ *,/\right\} \\
\left\langle WeakOp\right\rangle  & =\left\{ +,-\right\} \\
\left\langle RelOp\right\rangle  & =\left\{ |,\&,==,!=,<,>,\leq,\geq\right\} \\
\left\langle IdentInFactor\right\rangle  & ::={\color{red}IDENT}\,\left(\epsilon|{\color{red}[}\left\langle Expression\right\rangle {\color{red}]}|{\color{red}(}\left\langle ExpressionList\right\rangle {\color{red})}\right)\\
 & =\left\{ IDENT\right\} \\
\left\langle List\right\rangle  & ::={\color{red}@}\,\left({\color{red}@[}\left\langle KeyValueList\right\rangle {\color{red}]}|{\color{red}[}\left\langle ExpressionList\right\rangle {\color{red}]}\right)\\
\left\langle Factor\right\rangle  & ::=\left\langle IdentInFactor\right\rangle |{\color{red}INT\_LIT}|{\color{red}true}|{\color{red}false}|{\color{red}STRING\_LIT}|{\color{red}!}\left\langle Factor\right\rangle |{\color{red}-}\left\langle Factor\right\rangle |{\color{red}size}{\color{red}(}\left\langle Expression\right\rangle {\color{red})}\\
 & |{\color{red}key(}\left\langle Expression\right\rangle {\color{red})}|{\color{red}value(}\left\langle Expression\right\rangle {\color{red})}|\left\langle Closure\right\rangle |\left\langle List\right\rangle |{\color{red}(}\left\langle Expression\right\rangle {\color{red})}\\
 & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Thing\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Elem\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Term\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle Expression\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle RangeExpr\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle RangeExprTail\right\rangle  & ::={\color{red}..}\left\langle Expression\right\rangle \\
 & =\left\{ ..\right\} \\
\left\langle KeyValueExpression\right\rangle  & =\left\{ IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle KeyValueList\right\rangle  & =\left\{ \epsilon,IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle ExpressionList\right\rangle  & =\left\{ \epsilon,IDENT,INT\_LIT,true,false,STRING\_LIT,(,!,-,size,key,value,\{,@\right\} \\
\left\langle LRValue\right\rangle  & ::={\color{red}[}\left\langle ExpressionList\right\rangle {\color{red}]}\\
 & =\left\{ [\right\} \\
\left\langle LValue\right\rangle  & ::={\color{red}IDENT}\,\left(\epsilon|\left\langle LRValue\right\rangle \right)\\
 & =\left\{ IDENT\right\} \\
\left\langle WhileStarExprTail\right\rangle  & ::=\epsilon|\left\langle RangeExprTail\right\rangle {\color{red})}\left\langle Block\right\rangle \\
\left\langle WhileStar\right\rangle  & ::={\color{red}*{\color{red}(}}\left\langle Expression\right\rangle \left\langle WhileStarExprTail\right\rangle \\
 & =\left\{ *\right\} \\
\left\langle While\right\rangle  & ::={\color{red}while}\left(\left\langle WhileStar\right\rangle |{\color{red}(}\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle \right)\\
 & =\left\{ while\right\} \\
\left\langle If\right\rangle  & ::={\color{red}if}{\color{red}(}\left\langle Expression\right\rangle {\color{red})}\left\langle Block\right\rangle \\
 & =\left\{ if\right\} \\
\left\langle Else\right\rangle  & ::=\epsilon|{\color{red}else}\left\langle Block\right\rangle \\
 & =\left\{ \epsilon,else\right\} \\
\left\langle Statement\right\rangle  & =\left\{ \epsilon,IDENT,print,\left\langle While\right\rangle ,if,\%,return,;\right\} \\
\left\langle VarDec\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle FormalArgList\right\rangle  & =\left\{ \epsilon,IDENT\right\} \\
\left\langle Closure\right\rangle  & ::==\left\{ \left\langle FormalArgList\right\rangle ->\left(\left\langle Statement\right\rangle {\color{red};}\right)*\right\} \\
 & =\left\{ \{\right\} \\
\left\langle ClosureDec\right\rangle  & =\left\{ IDENT\right\} \\
\left\langle CompositeValueType\right\rangle  & ::={\color{red}@}\left({\color{red}[}\left\langle Type\right\rangle {\color{red}]}|{\color{red}@}{\color{red}[}\left\langle SimpleType\right\rangle {\color{red}:}\left\langle Type\right\rangle {\color{red}]}\right)\\
 & =\left\{ @\right\} \\
\left\langle SimpleType\right\rangle  & =\left\{ int,boolean,string\right\} \\
\left\langle Type\right\rangle  & =\left\{ int,boolean,string,@\right\} \\
\left\langle DecTail\right\rangle  & ={\color{red}=}\left\langle Closure\right\rangle |{\color{red}:}\left\langle CompositeValueType\right\rangle |{\color{red}:}\left\langle SimpleType\right\rangle |\epsilon\\
 & =\left\{ =,:,\epsilon\right\} \\
\left\langle DecHead\right\rangle  & ::={\color{red}IDENT}\left\langle DecTail\right\rangle \\
 & =\left\{ IDENT\right\} \\
\left\langle Declaration\right\rangle  & ::={\color{red}def}\left\langle DecHead\right\rangle \\
\left\langle Declaration\right\rangle  & =\left\{ def\right\} \\
\left\langle Block\right\rangle  & =\left\{ \{\right\} \\
\left\langle ImportList\right\rangle  & =\left\{ \epsilon,import\right\} \\
\left\langle Program\right\rangle  & =\left\{ import,class\right\} 
\end{align*}

\end_inset


\end_layout

\end_body
\end_document
