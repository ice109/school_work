#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble

%
\usepackage{mathdots}
\usepackage{listings}
\usepackage{tikz}
\usepackage{pgf}
\usepackage{tikz-qtree}
\usepackage{multirow}
\usepackage{rotating}
\usepackage{amsfonts}\usepackage{nopageno}%%%  The following few lines affect the margin sizes. 
\addtolength{\topmargin}{-.5in}
\setlength{\textwidth}{6in}       
\setlength{\oddsidemargin}{.25in}              
\setlength{\evensidemargin}{.25in}         
  
\setlength{\textheight}{9in}
\renewcommand{\baselinestretch}{1}
\reversemarginpar   

\lstset{
numbers=left
}


%
%
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=single"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CNT5106C Homework 2 Solutions
\end_layout

\begin_layout Author
Maksim Levental
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If the sender sends only infrequently then exactly what you want is an ACK
 based protocol since it's optimal exactly for the usage pattern of the
 user - there will not be many ACKs since the sender doesn't send often.
 A NAK-only protocol would suffer from the problem that the receiver will
 always be uncertain about whether a packet was lost or whether the sender
 is simply idle.
 So the receiver would have to keep very long timers, since the sender takes
 very long between sending packets, and it's unknown whether a packet has
 taken too long to arrive or whether the sender hasn't sent anything.
\end_layout

\begin_layout Enumerate
In this case a NAK-only protocol would be preferable because the sender
 isn't often idle and so a long gap between received packet immediately
 implies that packets were lost in transmission from sender to receiver.
 So the timers that the receiver could keep wouldn't need to be long, since
 the sender isn't idle often.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If there is a one-to-one relationship between the transport layer and the
 network layer connection then the dynamic window of the transport layer
 should keep pace with the leading edge of the sliding window of the network
 layer.
 This is because otherwise the sliding window in the network layer will
 have idle slots which are 
\begin_inset Quotes eld
\end_inset

ahead
\begin_inset Quotes erd
\end_inset

 of possible frames which can be sent by the transport layer.
 The tail of the window in the transport layer should also not be ahead
 of the tail of the window in the network layer because otherwise packets
 dropped in the network layer will not be recoverable.
\end_layout

\begin_layout Enumerate
If there are multiple network layer connections then it is not so critical
 that the head of the of the transport layer's dynamic window should keep
 pace, or be ahead, of the head of the network layer's window, since there
 are many network connections and idleness of some doesn't incur such a
 high overall cost.
\end_layout

\begin_layout Enumerate
If there are multiple transport layer connections multiplexed into one network
 layer connection then it's important that there is room in the sliding
 window of the network layer to encompass all of the windows of each transport
 layer dynamic window, so that packets dropped in the network layer can
 be recovered by the transport layer.
 Therefore transport layer window sizes should be coordinated.
 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Graph
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename Chapter3-helmy-F14-1.jpg
	scale 66

\end_inset


\begin_inset Newline newline
\end_inset

Congestion collapse happens at about the second green dot and it happens
 because utilization of the network goes above 80%.
 So wait time in queues increases exponentially and so ACK timers time out
 and sender retransmit, which only cyclically causes the buffers to become
 even more loaded, and then timers run even longer, etc.
\end_layout

\begin_layout Enumerate
TCP tries to operate in between the two green dots.
 First TCP initializes the slow start mechanism which sets the congestion
 window to 1 and then increases the width of congestion window by 1 for
 each ACK received from the receiver.
 Then when timeout occurs a threshold is recorded called 'ssthresh' which
 is the width of the congestion window divided by two, and the window is
 again set to have a width of 1.
 Then the slow start mechanism is repeated until 'ssthresh' is reached at
 which point the window width is increased linearly by 1 per round trip
 time.
 If 3 duplicate ACKs are received then TCP goes into fast recovery mode,
 wherein it again records 'ssthresh' to be the congestion window divided
 by 2.
 It then retransmits the dropped segments and sets the congestion window
 to be 'ssthresh' plus 3 and then again starts growing the congestion window
 by 1 per 
\series bold
duplicate
\series default
 ACK.
 Finally after getting a cumulative ACK it sets the congestion window back
 to 'ssthresh' and then continues to grow linearly for every RTT.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The 'ssthresh' variable is set to the current congestion windows divided
 by 2 in order to probe the capacity of the network using a sawtooth like
 pattern, in a sense a binary search of what the right congestion window
 size should be.
 It certainly couldn't be something like CongWin-20 since that might be
 negative when the network is under heavy load (CongWin<20).
\end_layout

\begin_layout Enumerate
In order to quickly back off from the current sending rate, in order to
 aggresively avoid congestion in the network.
\end_layout

\begin_layout Enumerate
To compensate for the 3 out of order packets that the 3 ACKs acknowledge
 receiving.
\end_layout

\begin_layout Enumerate
No since you will only receive duplicate ACKs for out of order packets received
 before the retransmitted packet arrives, and then as soon a non-duplicate
 ACK arrives growth becomes linear again.
\end_layout

\begin_layout Enumerate
Since the sender receives 3 duplicate ACKs this gives it implicit knowledge
 that the network is not too heavily congested (there was enough capacity
 that the receiver was able to send through 3 duplicate ACKs) and this is
 why CongWin=ssthresh upon exit of fast recovery.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If there are several long lived TCP flows then UDP would get an unfair share
 the bandwidth in cases of congestion.
 This is because each of the TCP flow will be in the congestion control
 (most often being in the congestion avoidance phase) while UDP will not
 meter its flow whatsoever.
 In these instances it is probably the case that the TCP packets will be
 lost more often because of the interference from UDP.
\end_layout

\begin_layout Enumerate
Obviously you would inject traffic on the smallest pipe, between nodes C
 and B, in the direction of receiver to sender.
 This is in order to get the ACKs coming from the receiver to be dropped
 and therefore trick the TCP connection into believing that there's very
 heavy congestion in the network, thereby causing it to go into congestion
 avoidance.
 
\end_layout

\begin_layout Enumerate
The optimal place to inject traffic would be between node D and the receiver.
 This is so to maximize the probability of receiving ACKs quickly from the
 receiver and maximize the slow start growth of each of the short lived
 connections.
 This would then overwhelm the receiver and give the long lived flow from
 the sender the impression that the network was very congested.
\end_layout

\end_deeper
\begin_layout Enumerate
TCP's performance degrades over wireless links because of signal strength
 and bit-error rates which contribute more to RTTs than congestion does.
 So a wireless network might not be very congested and yet TCP estimates
 that it is, because the links are weak, and then all of the hosts spend
 all of their time unnecessarily in congestion avoidance.
 If the network provides explicit congestion signaling I would propose that
 TCP uses those indicators instead of RTT of packets.
 The improvement would obviously be that hosts would not be in congestion
 avoidance unnecessarily but the drawbacks would be that on wired networks
 there would be unnecessary overhead since RTTs are an effective implicit
 measure of congestion already, and can be calculated without sending the
 extra explicit information (which cause the overhead).
\end_layout

\begin_layout Enumerate
Graph
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename atmplot.jpg

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\text{Rate}_{new}=\text{Rate}_{old}-\text{Rate}_{old}\times RDF=\text{Rate}_{old}\left(1-RDF\right)$
\end_inset

.
 Let 
\begin_inset Formula $\text{Rate}_{t=0}$
\end_inset

 be the initial rate.
 Then
\begin_inset Formula 
\[
\text{Rate}_{t=k}=\text{Rate}_{t=k-1}\times(1-RDF)=\text{Rate}_{t=k-2}\times(1-RDF)^{2}=\cdots=\text{Rate}_{t=0}\times(1-RDF)^{k}
\]

\end_inset

Therefore for any RDF the rate will decrease exponentially quickly, for
 example even if 
\begin_inset Formula $\text{RDF}=\frac{1}{10}$
\end_inset

 after 5 CI bits
\begin_inset Formula 
\[
\]

\end_inset


\begin_inset Formula 
\[
\text{Rate}_{t=5}=\text{Rate}_{t=0}\times\left(1-\frac{1}{10}\right)^{5}=\text{Rate}_{t=0}\times\left(\frac{9}{10}\right)^{5}\approx.59\text{\times Rate}_{t=0}
\]

\end_inset

For a more aggressive RDF, such as 
\begin_inset Formula $1/4$
\end_inset

 we have even greater reduction 
\begin_inset Formula 
\[
\text{Rate}_{t=5}=\text{Rate}_{t=0}\times\left(1-\frac{1}{4}\right)^{5}=\text{Rate}_{t=0}\times\left(\frac{3}{4}\right)^{5}\approx.23\times\text{Rate}_{t=0}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\text{Rate}_{new}=\text{Rate}_{old}\times\beta$
\end_inset

 is equivalent to 
\begin_inset Formula $\text{Rate}_{new}=\text{Rate}_{old}-\text{Rate}_{old}\times RDF=\text{Rate}_{old}\left(1-RDF\right)$
\end_inset

 for 
\begin_inset Formula $\beta=\left(1-RDF\right)$
\end_inset

.
 So for appropriate choices of 
\begin_inset Formula $\beta$
\end_inset

 the responses will be exactly the same.
\end_layout

\end_deeper
\begin_layout Enumerate
Packets can be lost in many ways other than outright network failure.
 For example if link utilization exceeds 80% then queues will fill completely
 and packets will simply be dropped from queue tails.
 So congestion can be a cause of packet loss that's not explicit network
 failure.
 Furthermore packets can be lost in the sense that they incur bit-errors
 from sender to receiver, for example over wireless links.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Assume exponentially distributed times between arrivals for each circuit.
 Then for virtual circuit one a probability for 1 arrival in 1 unit of time
 (1 time slot) of .1 implies
\begin_inset Formula 
\[
\int_{0}^{1}\lambda_{1}e^{-\lambda_{1}x}dx=.1\implies\lambda_{1}\approx.105
\]

\end_inset

and for virtual circuit 2
\begin_inset Formula 
\[
\int_{0}^{1}\lambda_{1}e^{-\lambda_{2}x}dx=.2\implies\lambda_{2}\approx.223
\]

\end_inset

and for virtual circuit 3
\begin_inset Formula 
\[
\int_{0}^{1}\lambda_{3}e^{-\lambda_{3}x}dx=.3\implies\lambda_{3}\approx.357
\]

\end_inset

Then the condition for constant queuing delay, namely that
\begin_inset Formula 
\[
\frac{\lambda_{1}}{f_{1}}=\frac{\lambda_{2}}{f_{2}}=\frac{\lambda_{3}}{f_{3}}=k
\]

\end_inset

 where 
\begin_inset Formula $f_{i}$
\end_inset

 is the portion of flow allocated to virtual circuit 
\begin_inset Formula $i$
\end_inset

, implies that 
\begin_inset Formula $f_{1}=\frac{\lambda_{1}}{k}$
\end_inset

 and 
\begin_inset Formula $f_{2}=\frac{\lambda_{2}}{k}$
\end_inset

 and 
\begin_inset Formula $f_{3}=\frac{\lambda_{3}}{k}$
\end_inset

.
 Since 
\begin_inset Formula $k$
\end_inset

 is proportional to the utilization for each flow, and we want to stay below
 total server utilization 
\begin_inset Formula $\rho=.8$
\end_inset

 choose 
\begin_inset Formula $k=.75$
\end_inset

 and then 
\begin_inset Formula $f_{1}=\frac{.105}{.75}\approx.14$
\end_inset

 and 
\begin_inset Formula $f_{2}=\frac{.223}{.75}\approx.297$
\end_inset

 and 
\begin_inset Formula $f_{3}=\frac{.357}{.75}\approx.476$
\end_inset

.
 
\end_layout

\begin_layout Enumerate
Assume exponentially distributed times between arrivals for each circuit.
 Then for virtual circuit one a probability for 1 arrival in 1 unit of time
 (1 time slot) of .1 implies
\begin_inset Formula 
\[
\int_{0}^{1}\lambda_{1}e^{-\lambda_{1}x}dx=.05\implies\lambda_{1}\approx.0513
\]

\end_inset

and for virtual circuit 2
\begin_inset Formula 
\[
\int_{0}^{1}\lambda_{1}e^{-\lambda_{2}x}dx=.05\implies\lambda_{2}\approx.0513
\]

\end_inset

and for virtual circuit 3
\begin_inset Formula 
\[
\int_{0}^{1}\lambda_{3}e^{-\lambda_{3}x}dx=.5\implies\lambda_{3}\approx.693
\]

\end_inset

Then the condition for constant queuing delay, namely that
\begin_inset Formula 
\[
\frac{\lambda_{1}}{f_{1}}=\frac{\lambda_{2}}{f_{2}}=\frac{\lambda_{3}}{f_{3}}=k
\]

\end_inset

 where 
\begin_inset Formula $f_{i}$
\end_inset

 is the portion of flow allocated to virtual circuit 
\begin_inset Formula $i$
\end_inset

, implies that 
\begin_inset Formula $f_{1}=\frac{\lambda_{1}}{k}$
\end_inset

 and 
\begin_inset Formula $f_{2}=\frac{\lambda_{2}}{k}$
\end_inset

 and 
\begin_inset Formula $f_{3}=\frac{\lambda_{3}}{k}$
\end_inset

.
 Since 
\begin_inset Formula $k$
\end_inset

 is proportional to the utilization for each flow, and we want to stay below
 total server utilization 
\begin_inset Formula $\rho=.8$
\end_inset

 choose 
\begin_inset Formula $k=.75$
\end_inset

 and then 
\begin_inset Formula $f_{1}=\frac{.0513}{.75}\approx.0684$
\end_inset

 and 
\begin_inset Formula $f_{2}=\frac{.0513}{.75}\approx.0684$
\end_inset

 and 
\begin_inset Formula $f_{3}=\frac{..693}{.75}\approx.924$
\end_inset

.
 Therefore at utilization 
\begin_inset Formula $k=.75$
\end_inset

 these 3 flows are unsustainable.
 Ramping up to 
\begin_inset Formula $k=.9$
\end_inset

 then 
\begin_inset Formula $f_{1}=\frac{.0513}{.9}\approx.0580$
\end_inset

 and 
\begin_inset Formula $f_{2}=\frac{.0513}{.9}\approx.0580$
\end_inset

 and 
\begin_inset Formula $f_{3}=\frac{..693}{.9}\approx.770$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\end_layout

\end_inset


\series bold
Wireshark Lab 1
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[1]
\end_layout

\end_inset

TCP, TLSv1.2, DB-LSP-DISC
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[2]
\end_layout

\end_inset

2.189115000-2.122551000=0.066564 seconds
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[3]
\end_layout

\end_inset

The IP address of gaia.cs.umass.edu is 128.119.245.12.
 My local network address is 192.168.1.103 and my wide area network (WAN) address
 is 98.180.54.7
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[4]
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
GET:
\series default
 No.
 Time Source Destination Protocol Length Info 21 2.122551000 192.168.1.103 128.119.245.
12 HTTP 525 GET /wireshark-labs/INTRO-wireshark-file1.html HTTP/1.1 Frame
 21: 525 bytes on wire (4200 bits), 525 bytes captured (4200 bits) on interface
 0 Ethernet II, Src: IntelCor_1b:ac:33 (68:5d:43:1b:ac:33), Dst: D-LinkIn_d5:95:
67 (1c:af:f7:d5:95:67) Internet Protocol Version 4, Src: 192.168.1.103 (192.168.1.103)
, Dst: 128.119.245.12 (128.119.245.12) Transmission Control Protocol, Src Port:
 37695 (37695), Dst Port: http (80), Seq: 1, Ack: 1, Len: 459 Hypertext
 Transfer Protocol 
\end_layout

\begin_layout Enumerate

\series bold
OK: 
\series default
No.
 Time Source Destination Protocol Length Info 23 2.189115000 128.119.245.12
 192.168.1.103 HTTP 446 HTTP/1.1 200 OK (text/html) Frame 23: 446 bytes on wire
 (3568 bits), 446 bytes captured (3568 bits) on interface 0 Ethernet II,
 Src: D-LinkIn_d5:95:67 (1c:af:f7:d5:95:67), Dst: IntelCor_1b:ac:33 (68:5d:43:1b
:ac:33) Internet Protocol Version 4, Src: 128.119.245.12 (128.119.245.12), Dst:
 192.168.1.103 (192.168.1.103) Transmission Control Protocol, Src Port: http (80),
 Dst Port: 37695 (37695), Seq: 1, Ack: 460, Len: 380 Hypertext Transfer
 Protocol Line-based text data: text/html 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[]
\end_layout

\end_inset


\series bold
Wireshark Lab 2
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[Q11]
\end_layout

\end_inset


\series bold
HTTP GET:
\series default
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

GET /wireshark-labs/INTRO-wireshark-file1.html 
\begin_inset Newline newline
\end_inset

HTTP/1.1 
\begin_inset Newline newline
\end_inset

Host: gaia.cs.umass.edu 
\begin_inset Newline newline
\end_inset

Connection: keep-alive 
\begin_inset Newline newline
\end_inset

Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
 
\begin_inset Newline newline
\end_inset

User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like
 Gecko) Chrome/38.0.2125.101 Safari/537.36 
\begin_inset Newline newline
\end_inset

Referer: http://www.cise.ufl.edu/~helmy/F14/Wireshark_Intro_v6.0.pdf 
\begin_inset Newline newline
\end_inset

Accept-Encoding: gzip,deflate,sdch 
\begin_inset Newline newline
\end_inset

Accept-Language: en-US,en;q=0.8,ru;q=0.6
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
HTTP OK: 
\series default

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

HTTP/1.1 200 OK 
\begin_inset Newline newline
\end_inset

Date: Tue, 21 Oct 2014 17:52:10 GMT 
\begin_inset Newline newline
\end_inset

Server: Apache/2.2.3 (CentOS) 
\begin_inset Newline newline
\end_inset

Last-Modified: Tue, 21 Oct 2014 17:52:01 GMT 
\begin_inset Newline newline
\end_inset

ETg 8734b-51-7d011240 
\begin_inset Newline newline
\end_inset

Accept-Ranges: bytes 
\begin_inset Newline newline
\end_inset

Content-Length: 81 
\begin_inset Newline newline
\end_inset

Keep-Alive: timeout=10, max=100 
\begin_inset Newline newline
\end_inset

Connection: Keep-Alive 
\begin_inset Newline newline
\end_inset

Content-Type: text/html; charset=UTF-8
\begin_inset Newline newline
\end_inset

<html> Congratulations! You've downloaded the first Wireshark lab file!
 </html>
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[1]
\end_layout

\end_inset

Both my browser and the server are running HTTP/1.1 as indicated in the second
 line of the 
\series bold
GET
\series default
 packet and the first line of the 
\series bold
OK 
\series default
packet.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[2]
\end_layout

\end_inset

My browser indicates 
\series bold
Accept-Language: en-US,en;q=0.8,ru;q=0.6 
\series default
so it accepts en-US,en, and ru.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[3]
\end_layout

\end_inset

The IP address of gaia.cs.umass.edu is 128.119.245.12.
 My local network address is 192.168.1.103 and my wide area network (WAN) address
 is 98.180.54.7 as shown in the packets from 
\series bold
Wireshark Lab 1
\series default
.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[4]
\end_layout

\end_inset

The server returns HTTP/1.1 200 OK so the status code is 200.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[5]
\end_layout

\end_inset

Last-Modified: Tue, 21 Oct 2014 17:52:01 GMT
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[6]
\end_layout

\end_inset

Content-Length: 81
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[7]
\end_layout

\end_inset

I see a TCP header, IP header, and an Ethernet header.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[Q12]
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[8]
\end_layout

\end_inset

No I don't see an IF-MODIFIED-SINCE header.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[9]
\end_layout

\end_inset

The server did explicitly return a response, an HTTP/1.1 200 OK response
 with 
\begin_inset Quotes eld
\end_inset

Line-based text data: text/html
\begin_inset Quotes erd
\end_inset

 <html>
\begin_inset Newline newline
\end_inset

Congratulations again! Now you've downloaded the file lab2-2.html.
 <br> This file's last modification date will not change.
 <p> Thus if you download this multiple times on your browser, a complete
 copy <br> will only be sent once by the server due to the inclusion of
 the IN-MODIFIED-SINCE<br> field in your browser's HTTP GET request to the
 server.
\begin_inset Newline newline
\end_inset

</html>.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[10]
\end_layout

\end_inset

I see 
\begin_inset Quotes eld
\end_inset

If-Modified-Since: Tue, 21 Oct 2014 18:54:01 GMT
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[11]
\end_layout

\end_inset

The status code is HTTP/1.1 304 Not Modified and no more html was returned.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[Q13]
\end_layout

\end_inset


\begin_inset Graphics
	filename longfile.jpg
	scale 25

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[12]
\end_layout

\end_inset

My browser sent one GET request and in my packet list it was number 4.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[13]
\end_layout

\end_inset

In my packet list the response is packet 12.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[14]
\end_layout

\end_inset

The status code is 200 OK
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[15]
\end_layout

\end_inset

It's not visible in the graphic but in the packet inspection window for
 packet 12, the response, it states the packet is 4 reassembled TCP segments
 totaling 4803 bytes: #6(1448), #8(1448), #10(1448), #12(459)
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[Q14]
\end_layout

\end_inset


\begin_inset Graphics
	filename longfile2.jpg
	scale 25

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[16]
\end_layout

\end_inset

The browser sent 4 messages, packets 20,42,72,98.
 The IP addresses were 128.119.245.12, 165.193.140.12, 128.119.240.90, and 128.119.240.90
 again.
 
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[17]
\end_layout

\end_inset

It looks like they were downloaded serially since first the first GET was
 issued, then the first image was downloaded, then the second GET was issued,
 then the second image was downloaded.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[Q15]
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[18]
\end_layout

\end_inset


\begin_inset Graphics
	filename pw.jpg
	scale 25

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[18]
\end_layout

\end_inset

The server's response is HTTP/1.1 401 Authorization required.
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

[19]
\end_layout

\end_inset

The new field is Authorization: Basic d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=
 , the encoded login and password.
\end_layout

\end_deeper
\end_body
\end_document
